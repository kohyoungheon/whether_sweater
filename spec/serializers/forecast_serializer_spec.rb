require 'rails_helper'

RSpec.describe ForecastSerializer, type: :serializer do
  it 'can serialize forecasts' do
    json = File.read('spec/fixtures/forecast.json')
    forecast = JSON.parse(json, symbolize_names: true)
    serialized = ForecastSerializer.new(forecast).serialize
    
    expect(serialized).to be_a(Hash)
    expect(serialized).to have_key(:data)
    expect(serialized[:data]).to be_a(Hash)

    expect(serialized[:data]).to have_key(:id)
    expect(serialized[:data][:id]).to eq(nil)
    expect(serialized[:data]).to have_key(:type)
    expect(serialized[:data][:type]).to eq('forecast')

    expect(serialized[:data]).to have_key(:attributes)
    expect(serialized[:data][:attributes]).to be_a(Hash)
    expect(serialized[:data][:attributes]).to have_key(:current_weather)
    expect(serialized[:data][:attributes][:current_weather]).to be_a(Hash)

    expect(serialized[:data][:attributes][:current_weather]).to have_key(:last_updated)
    expect(serialized[:data][:attributes][:current_weather][:last_updated]).to be_a(String)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:temperature)
    expect(serialized[:data][:attributes][:current_weather][:temperature]).to be_a(Float)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:feels_like)
    expect(serialized[:data][:attributes][:current_weather][:feels_like]).to be_a(Float)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:humidity)
    expect(serialized[:data][:attributes][:current_weather][:humidity]).to be_a(Integer)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:uvi)
    expect(serialized[:data][:attributes][:current_weather][:uvi]).to be_a(Float)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:visibility)
    expect(serialized[:data][:attributes][:current_weather][:visibility]).to be_a(Float)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:condition)
    expect(serialized[:data][:attributes][:current_weather][:condition]).to be_a(String)
    expect(serialized[:data][:attributes][:current_weather]).to have_key(:icon)
    expect(serialized[:data][:attributes][:current_weather][:icon]).to be_a(String)

    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:last_updated_epoch)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:wind_mph)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:wind_kph)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:wind_degree)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:wind_dir)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:pressure_mb)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:pressure_in)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:precip_mm)
    expect(serialized[:data][:attributes][:current_weather]).to_not have_key(:precip_in)

    expect(serialized[:data][:attributes]).to have_key(:daily_weather)
    expect(serialized[:data][:attributes][:daily_weather]).to be_a(Array)
    expect(serialized[:data][:attributes][:daily_weather][0]).to be_a(Hash)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:date)
    expect(serialized[:data][:attributes][:daily_weather][0][:date]).to be_a(String)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:sunrise)
    expect(serialized[:data][:attributes][:daily_weather][0][:sunrise]).to be_a(String)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:sunset)
    expect(serialized[:data][:attributes][:daily_weather][0][:sunset]).to be_a(String)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:max_temp)
    expect(serialized[:data][:attributes][:daily_weather][0][:max_temp]).to be_a(Float)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:min_temp)
    expect(serialized[:data][:attributes][:daily_weather][0][:min_temp]).to be_a(Float)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:condition)
    expect(serialized[:data][:attributes][:daily_weather][0][:condition]).to be_a(String)
    expect(serialized[:data][:attributes][:daily_weather][0]).to have_key(:icon)
    expect(serialized[:data][:attributes][:daily_weather][0][:icon]).to be_a(String)

    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:max_temp_c)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:min_temp_c)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:maxwind_kph)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:totalprecip_mm)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:totalsnow_cm)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:avgvis_km)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:avghumidity)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:daily_will_it_rain)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:daily_chance_of_rain)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:daily_will_it_snow)
    expect(serialized[:data][:attributes][:daily_weather][0]).to_not have_key(:daily_chance_of_snow)
  end
end